%import common.WS
%import common.CNAME
%import common.SIGNED_NUMBER
%import common.ESCAPED_STRING 

LITERAL: SIGNED_NUMBER | ESCAPED_STRING 
IDENTIFIER: CNAME
INT_TYPES: "int8" | "int16" |  "int32" | "int64"
PTR_INT_TYPES: "ptr int8" | "ptr int16" | "ptr int32" | "ptr int64"
TYPE: INT_TYPES | PTR_INT_TYPES | "array" | "string"

!expr: LITERAL | IDENTIFIER | array | ["("] statement [")"] 
!array: ["undef"] (INT_TYPES | PTR_INT_TYPES) "{" (SIGNED_NUMBER | IDENTIFIER) ("," (SIGNED_NUMBER | IDENTIFIER))* "}"

!declaration_stmt: TYPE IDENTIFIER [ "=" expr ] ";"
!assign_stmt: expr "=" expr ";"
!if_stmt: "if" "(" test_stmts ")" block ["else" block]
!while_stmt: "while" "(" test_stmts ")" block
!functioncall_stmt: IDENTIFIER "(" (expr)? ("," expr)*  ")" [";"]
!addition_stmt: expr "+" expr [";"]
!subtraction_stmt: expr "-" expr [";"]
!multiplication_stmt: expr "*" expr [";"]
!division_stmt: expr "/" expr [";"]
!bitwiseand_stmt: expr "&&" expr [";"]
!bitwiseor_stmt: expr "||" expr [";"]
!bitwisexor_stmt: expr "^" expr [";"]
!return_stmt: "return" expr ";"
!equality_stmt: expr "==" expr [";"]
!inequality_stmt: expr "!=" expr [";"]
!greater_stmt: expr ">" expr [";"]
!greatereq_stmt: expr ">=" expr [";"]
!lower_stmt: expr "<" expr [";"]
!lowereq_stmt: expr "<=" expr [";"]
!dereference_stmt.1: "*" expr
!addressof_stmt: "&" IDENTIFIER
!casting_stmt: IDENTIFIER "=" TYPE ";"
!rol_stmt: expr "rol" expr [";"]
!ror_stmt: expr "ror" expr [";"]
!rol16_stmt: expr "rol16" expr [";"]
!ror16_stmt: expr "ror16" expr [";"]
!shl_stmt: expr "shl" expr [";"]
!shr_stmt: expr "shr" expr [";"]
!negate_stmt: "!" expr [";"]
!indexing_stmt: expr "[" expr "]" [";"]
!asm_stmt: "_asm(" ESCAPED_STRING "," ESCAPED_STRING "," ESCAPED_STRING ")" [";"]

?misc_stmts: casting_stmt | asm_stmt
?test_stmts: equality_stmt | inequality_stmt | greater_stmt | greatereq_stmt | lower_stmt | lowereq_stmt
?unary_stmts: dereference_stmt | addressof_stmt | negate_stmt | indexing_stmt
?binary_stmts: declaration_stmt | assign_stmt | addition_stmt | subtraction_stmt | multiplication_stmt | division_stmt | bitwiseand_stmt | bitwiseor_stmt | bitwisexor_stmt | rol_stmt | ror_stmt | rol16_stmt | ror16_stmt| shl_stmt | shr_stmt
?flow_stmts: functioncall_stmt | return_stmt | if_stmt | while_stmt
?statement:  misc_stmts | flow_stmts | binary_stmts | unary_stmts | test_stmts

!block: "{" statement* "}"

syscall_def: "declare" "(" ESCAPED_STRING "," ESCAPED_STRING ")" "(" (TYPE)? ("," TYPE)* ")" ";"
func_def: TYPE "fn" IDENTIFIER "(" (TYPE IDENTIFIER)? ("," TYPE IDENTIFIER)*  ")" block

program: syscall_def* func_def+

%ignore WS