int16 fn to_lowercase(int16 char) {
    if(char >= 0x41){
        if(char <= 0x5a) {
            char += 32;
        }
    }
    return char;
}

int32 fn compute_function_hash(int64 name) {
    int32 hash = 0;
    int8 cnt = 0;
    int8 char = *(name + cnt);
    while(char != 0){
        hash = (hash shr 13) || (hash shl 19);
        hash += char;
        cnt += 1;
        char = *(name + cnt);
    }
    return hash;
}

int64 fn find_actual_dll_name(int64 path) {
    int64 cnt = 0;
    int64 last_backslash = 0;
    int8 current_char = *(path + cnt);
    while(current_char != 0x00) {
        if(current_char == 0x5c) {
            last_backslash = path + cnt;
        }
        cnt += 2;
        current_char = *(path + cnt);
    }
    return last_backslash + 2;
}

int32 fn compute_module_hash(int64 name) {
    int64 actual_name = find_actual_dll_name(name);
    int32 hash = 0;
    int8 cnt = 0;
    int16 char = *(actual_name + cnt);
    while(char != 0){
        char = to_lowercase(char);
        hash = (hash shr 13) || (hash shl 19);
        hash += char;
        cnt += 2;
        char = *(actual_name + cnt);
    }
    return hash;
}

int64 fn find_module_base(int32 hash) {
    int64 pointer = 0;
    _asm("pointer:rax", "mov %gs:0x30, %rax", "rax:pointer");
    pointer = *(pointer + 0x60);
    pointer = *(pointer + 0x18);
    pointer = *(pointer + 0x20);
    int8 guard = 0;
    while(guard == 0) {
        int64 table_entry = *(pointer - 0x10);
        int64 name = *(table_entry + 0x50);
        int16 first_char = *name;
        if(first_char == 0) {
            return 0;
        }
        int32 computed_hash = compute_module_hash(name);
        if(computed_hash == hash) {
           return *(table_entry + 0x30);
        }
        pointer = *pointer;
    }
    return 0;
}

int64 fn find_function(int32 function_hash, int32 module_hash, ptr int8 module_name){
    int64 base_address = find_module_base(module_hash);
    if(base_address == 0) {
        int64 load_library = find_function(0xec0e4e8e, 0x6e2bca17, module_name);
        _asm("load_library:rax,module_name:rcx", "call rax", "rax:base_address");
    }
    int32 pe_signature = *(base_address + 0x3c);
    pe_signature = int64;
    pe_signature += base_address;
    int32 export_table_directory = *(pe_signature + 0x88);
    export_table_directory = int64;
    export_table_directory += base_address;
    int32 number_of_names = *(export_table_directory + 0x18);
    int32 address_of_names = *(export_table_directory + 0x20);
    address_of_names = int64;
    address_of_names += base_address;
    number_of_names -= 1;
    while(number_of_names > 0) {
        int32 symbol_name_offset = *(address_of_names + (number_of_names * 4));
        int64 symbol_name = base_address + symbol_name_offset;
        int32 computed = compute_function_hash(symbol_name);
        if(computed == function_hash) {
            int32 address_of_name_ordinal = *(export_table_directory + 0x24);
            address_of_name_ordinal = int64;
            address_of_name_ordinal += base_address;
            int16 ordinal = *(address_of_name_ordinal + (2 * number_of_names));
            int32 address_of_functions = *(export_table_directory + 0x1c);
            address_of_functions = int64;
            address_of_functions += base_address;
            int32 function_address = *(address_of_functions + (4 * ordinal));
            function_address = int64;
            function_address += base_address;
            return function_address;
        }
        number_of_names -= 1;
    }
    return 0;
}