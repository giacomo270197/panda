int32 fn compute_module_hash(int32 name) {
    int32 hash = 0;
    int8 cnt = 0;
    int16 char = *(name + cnt);
    while(char != 0){
        hash = (hash shr 13) || (hash shl 19);
        hash += char;
        cnt += 2;
        char = *(name + cnt);
    }
    return hash;
}

int64 fn find_module_base(int32 hash) {
    int64 pointer = 0;
    _asm("pointer:rax", "mov %gs:0x00, %rax", "rax:pointer");
    pointer = *(pointer + 0x60);
    pointer = *(pointer + 0x18);
    pointer = *(pointer + 0x20);
    int64 base_address = *(pointer + 8);
    int32 module_name = *(pointer + 0x20);
    int8 guard = 0;
    while(guard == 0) {
        pointer = *pointer;
        base_address = *(pointer + 8);
        module_name = *(pointer + 0x20);
        if(module_name == 0) {
            return 0;
        }
        int32 computed_hash = compute_module_hash(module_name);
        if (computed_hash == hash) {
            return base_address;
        }
    }
    return 0;
}