declare("RtlCreateHeap", "ntdll.dll");
declare("RtlAllocateHeap", "ntdll.dll");

int fn strlen(string str) {
   int cnt = 0;
   int char = str[cnt];
   while(char > 0) {
      cnt += 1;
      char = str[cnt];
   }
   return cnt;
}

int fn strcmp(string str1, string str2) {
   int len1 = strlen(str1);
   int len2 = strlen(str2);
   int cnt = 0;
   if (len1 != len2) {
      return 0;
   }
   while(cnt <= len1) {
      int a = str1[cnt];
      int b = str2[cnt];
      if(a != b) {
         return 0;
      }
      cnt += 1;
   }
   return 1;
}

string fn strcat(string str1, string str2) {
   int len1 = strlen(str1);
   int len2 = strlen(str2);
   int totalLength = len1 + len2;
   totalLength += 1;
   int heap_handle = RtlCreateHeap(2, 0, 0, 0, 0, 0);
   int newStr = RtlAllocateHeap(heap_handle, 8, totalLength);
   newStr = string;
   int cnt = 0;
   while(cnt <= len1) {
        newStr[cnt] = str1[cnt];
        cnt += 1;
   }
   cnt = 0;
   while(cnt <= len2) {
        int idx = cnt + len1;
        newStr[idx] = str2[cnt];
        cnt += 1;
   }
   newStr[totalLength] = 0;
   return newStr;
}

string fn strrvr(string str, int in_place) {
    int cnt = 0;
    int len = strlen(str) - 1;
    if(in_place) {
        while(cnt <= len) {
            int tmp = 0;
            tmp = string;
            tmp = str[cnt];
            str[cnt] = str[len];
            str[len] = tmp;
            cnt += 1;
            len -= 1;
        }
        return str;
    } else {
        int heap_handle = RtlCreateHeap(2, 0, 0, 0, 0, 0);
        int newStr = RtlAllocateHeap(heap_handle, 8, len + 1);
        newStr = string;
        while(len >= 0) {
            newStr[cnt] = str[len];
            cnt += 1;
            len -= 1;
        }
        return newStr;
    }
}

